{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","onNameChange","e","setState","name","target","value","onBreedChange","onBirthdayChange","handleFormSubmission","event","preventdefault","formCompleted","console","log","state","breed","birthday","gender","spayedOrNeutered","weight","className","type","placeholder","this","onChange","id","class","for","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gOAsIiBA,G,wDAlIf,aAAe,IAAD,8BACZ,gBAaJC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,KAAMF,EAAEG,OAAOC,SAhBH,EAoBhBC,cAAgB,SAACL,GACf,EAAKC,SAAS,CACZC,KAAMF,EAAEG,OAAOC,SAtBH,EA0BhBE,iBAAmB,SAACN,GAClB,EAAKC,SAAS,CACZC,KAAMF,EAAEG,OAAOC,SA5BH,EAiChBG,qBAAuB,SAACC,GACtBA,EAAMC,iBACN,EAAKR,SAAS,CACZS,eAAgB,IAGlBC,QAAQC,IAAI,mBArCV,EAAKC,MAAQ,CACXX,KAAM,GACNY,MAAO,GACPC,SAAU,GACVC,OAAQ,GACRC,iBAAkB,GAClBC,OAAQ,GACRR,eAAe,GATL,E,qDA2CZ,OACE,6BACE,0FACA,0BAAMS,UAAU,YACd,uCACA,2BACEC,KAAK,OACLC,YAAY,kBACZjB,MAAOkB,KAAKT,MAAMX,KAClBqB,SAAUD,KAAKvB,eAEf,6BAAM,6BAER,wCACA,2BACEqB,KAAK,OACLC,YAAY,cACZjB,MAAOkB,KAAKT,MAAMC,MAClBS,SAAUD,KAAKjB,gBAEf,6BAAM,6BAEN,2CACA,2BACEe,KAAK,OACLC,YAAY,sBACZjB,MAAOkB,KAAKT,MAAME,SAClBQ,SAAUD,KAAKhB,mBAEf,6BAAM,6BAER,yCAAsB,6BAAK,6BAC3B,2BACEc,KAAK,WACLI,GAAK,SACLC,MAAM,aAEN,2BAAOC,IAAI,SAASD,MAAM,WAlChC,SAmCI,2BACEL,KAAK,QACLlB,KAAM,SACNE,MAAM,SAtCZ,QAwCM,6BAAM,6BAER,qDACA,2BACEgB,KAAK,UA5CX,OA8CI,2BACEA,KAAK,UA/CX,MAiDM,6BAAM,6BAEN,yCACA,2BACEA,KAAK,UArDb,cAuDM,2BACEA,KAAK,UAxDb,eA0DM,2BACEA,KAAK,UA3Db,gBA6DM,2BACEA,KAAK,UA9Db,YAgEM,6BAAM,6BAER,4BACEA,KAAK,SACLO,QAASL,KAAKf,sBAFhB,WAKgC,IAA7Be,KAAKT,MAAMH,cAA0B,mEAAgD,W,GAtHlFkB,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.4582de77.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component{\n  constructor() {\n    super ();\n    this.state = {\n      name: '',\n      breed: '',\n      birthday: '',\n      gender: '',\n      spayedOrNeutered: '',\n      weight: '',\n      formCompleted: false\n    }\n  }\n\n  //es6 functions\nonNameChange = (e) => {\n  this.setState({\n    name: e.target.value\n  })\n}\n\nonBreedChange = (e) => {\n  this.setState({\n    name: e.target.value\n  })\n}\n\nonBirthdayChange = (e) => {\n  this.setState({\n    name: e.target.value\n  })\n}\n\n\nhandleFormSubmission = (event) =>{\n  event.preventdefault();\n  this.setState({\n    formCompleted : true\n  })\n\n  console.log('Form submitted')\n}\n\n  render() {\n    return (\n      <div>\n        <h1>YAY, we love dogs! Give us some basic info about your pup.</h1>\n        <form className=\"dog-form\">\n          <label>Name</label>\n          <input\n            type=\"name\"\n            placeholder=\"Enter Pups Name\"\n            value={this.state.name}\n            onChange={this.onNameChange}\n            />\n            <br /><br />\n\n          <label>Breed</label>\n          <input\n            type=\"name\"\n            placeholder=\"Pup's breed\"\n            value={this.state.breed}\n            onChange={this.onBreedChange}\n            />\n            <br /><br />\n\n            <label>Birthday</label>\n            <input\n              type=\"date\"\n              placeholder=\"Pup's date of birth\"\n              value={this.state.birthday}\n              onChange={this.onBirthdayChange}\n              />\n              <br /><br />\n\n            <label >Gender</label><br/><br />\n            <input\n              type=\"checkbox\"\n              id = \"toggle\"\n              class=\"checkbox\"\n              /> \n              <input for=\"toggle\" class=\"switch\"></input>Female\n            <input\n              type=\"radio\"\n              name= \"gender\"\n              value=\"male\"\n              /> Male\n              <br /><br />\n\n            <label>Spayed or Neutered</label>\n            <input\n              type=\"radio\"\n              /> Yes\n            <input\n              type=\"radio\"\n              /> No\n              <br /><br />\n\n              <label>Weight</label>\n              <input\n                type=\"radio\"\n              /> 0 - 25 lbs\n              <input\n                type=\"radio\"\n              /> 25 - 50 lbs\n              <input\n                type=\"radio\"\n              /> 50 - 100 lbs\n              <input\n                type=\"radio\"\n              /> 100+ lbs\n              <br /><br />\n\n            <button\n              type=\"submit\"\n              onClick={this.handleFormSubmission}>\n                Submit\n              </button> \n              {this.state.formCompleted === true ? (<h2>Thank you for completing this form!</h2>) : null}\n        </form>\n      </div>\n    )\n    }\n  \n  }\n  \n  \n  \n  \n  \n  \n  export default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}